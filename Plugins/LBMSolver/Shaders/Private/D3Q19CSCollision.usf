#pragma enable_d3d11_debug_symbols

#include "/Engine/Public/Platform.ush"

#include "D3Q19CSDefinitions.usf"

#define ZERO_MIP 0

static float DeltaU = 0.001102;
static float Tau = 2.6;
int Iteration;

Texture3D<float> F_in;     // F with current t
RWTexture3D<float> F_out;  // t + 1
RWTexture3D<float3> U;      // output velocity
RWTexture3D<float> Density;

static float Rho0_solid = 1; //2.65;
//static float g = 9.8;   // Gravitational acceleration constant (m/s^2).
static float g_lattice = 0.9346 * pow(10, -24); // Gravitational acceleration constant in lattice units (dx/dt^2). This force was converted from 9.8 m/s^2 with dx_p / dx = 1.6 * 10^8 and dt_p / dt = (dx_p / dx) ^2 = 2.56 * 10^-16.
//float DeltaTime = 1;
//RWTexture2D<float> PorousTarget;

float getCellRho(float f[Q])
{
    float rho = 0;
    for (int i = 0; i < Q; i++)
    {
        rho += f[i];
    }
    
    return rho;
}

// Return pseudopotential for current density [T. Kruger et al. The Lattice Boltzmann Method Principles and Practice. eq 9.102].
float getPseudoPsi(float rho)     // TODO: try inline/lambda.
{
    return Rho0 * (1 - exp(-rho / Rho0));
}

float getNeighborCellRho(const uint3 x)
{
    float f[Q];
    int i;
    for (i= 0; i < Q; i++)
    {
        f[i] = F_in[uint3(x.x, x.y, x.z * Q + i)];
    }
    
    float rho = 0;
    for (i = 0; i < Q; i++)
    {
        rho += f[i];
    }
    
    return rho;
}

float getGreenFunction()
{
    return -0.5; //    (-4 * (1 - weights[0])) / (Q * Rho0);
}

// Calculates Shan-Chen force for multiphase flow with boundary condition [T. Kruger et al. The Lattice Boltzmann Method Principles and Practice. eq. 9.105 & eq. 9.116]. deltaT = 1.
float3 getForceSC(const uint3 x, float rho)
{
    float3 force_SC;
    
    // Sum part:
    for (int i = 0; i < Q; i++)
    {
        int3 c_i = int3(cxs[i], cys[i], czs[i]);
        int3 x_neigbour = int3(x.x + c_i.x, x.y + c_i.y, x.z + c_i.z); // TODO: сделать проверку на выход за границы.
        float rho_neighbour = 0;
        
        if (isBoundary(x_neigbour))
        {
            rho_neighbour = Rho0_solid;
        }
        else
        {
            rho_neighbour = getNeighborCellRho(x_neigbour);
        }
        
        force_SC += weights[i] * getPseudoPsi(rho_neighbour) * c_i;
    }
    
    float psi = getPseudoPsi(rho);
    float G = getGreenFunction();       // TODO: Add G_ff and G_sf.
    return -psi * G * force_SC;   
}

// Return gravity force in lattice units. Rho is cell rho.
float3 getGravityForce(float rho)
{
    return rho * float3(0, 0, g_lattice);
}

float3 getVelocity(float f[Q], float rho, float3 force)
{
    float3 u = float3(0, 0, 0);
    //for (int i = 0; i < Q; i++)
    //{
    //    float3 e = float3(cxs[i], cys[i], czs[i]);
    //    u += f[i] * e;
    //}
    //u /= rho;
    //return u;
    
    for (int i = 0; i < Q; i++)
    {
        float3 c = float3(cxs[i], cys[i], czs[i]);
        u += f[i] * c + force / 2;
    }
    u /= rho;
    return u;
}


// Реализация EDM (метод точной разности) для объемных сил [Куперштох А. Л. Учет действия объемных сил в решеточных уравнениях. Вестник НГУ (2004)].
float deltaF_eq(const uint3 x, int i)
{
    //TODO: реализовать.
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void Main(uint3 DTid : SV_DispatchThreadID)
{
    // INIT:
    uint i; // for iterator.
    // Координаты текущей ячейки рассчетной сетки LBM: 
    const uint3 cellId = DTid;
    
    // Текстурные координаты (2D): в одном потоке мы обрабатываем все направления скоростей, поэтому расширяем "y" в тестуре F.
    //const uint3 fTexCoord = uint3(DTid.x, DTid.y, DTid.z * Q);
    //const int x_tex_u = DTid.x;
    //const int y_tex_u = DTid.y;
    //const int x_tex_f = DTid.x;
    //const int y_tex_f = DTid.y * Q; // масштабируем Y {0..100} -> Y {0..900}, т.к. в одном узле сетки надо хранить 19 значений скорости (для каждого нарпавления).
    
    float3 u = float3(0, 0, 0);
    
        
    /* Копирование из глобальной памяти в локальную */
    float f[Q];
    for (i = 0; i < Q; i++)
    {
        //F_in[uint3(...)];
        f[i] = F_in[uint3(cellId.x, cellId.y, cellId.z * Q + i)]; //uint3(cellCoord.x, cellCoord.y, cellCoord.z + i)
    }
    
    
    //COLLISION:
    if (!isBoundary(cellId)) //((pow((x - Nx / 4), 2) + pow((y - Ny / 2), 2)) < pow((Ny / 4), 2))
    {
        float rho = getCellRho(f);
        
        float3 force_SC = getForceSC(cellId, rho);   // CHECK: is force is scalar?
        float3 force = getGravityForce(rho);    //force_SC;    // + getGravityForce(rho);
        
        
        u = getVelocity(f, rho, force);
    
        
        float f_eq[Q];
        float3 unit = float3(1, 1, 1); // единичный вектор.
        for (i = 0; i < Q; i++)
        {
            float3 e = float3(cxs[i], cys[i], czs[i]); // lattice direction.

            f_eq[i] = rho * weights[i] * (1 + 3 * dot(e * u, unit) +
                                   9 * pow(dot(e * u, unit), 2) / 2 -
                                   3 * dot(pow(u, 2), unit) / 2); // TODO: test 3D.
            f[i] += -(1.0 / Tau) * (f[i] - f_eq[i]);    // + deltaF_eq(cellId, i);
        }
        
        Density[cellId] = rho;
    }
        
    
    // F OUTPUT:
    for (i = 0; i < Q; i++)
    {
        if (Iteration > 0)
        {
            F_out[uint3(cellId.x, cellId.y, cellId.z * Q + i)] = f[i];
        }
    }
    
    // U OUTPUT:
    U[uint3(cellId.x, cellId.y, cellId.z)] = u;
    //// test:
    //U[uint3(cellId.x, cellId.y, cellId.z)] = (float)cellId.x / 64;
    

    //// POROUS BOIUNDARIES OUT: - TODO: сделать через дискретное преобразование Лапласа.
    //if (Iteration == 1 && isBoundary(x, y, z))
    //{
    //    PorousTarget[int2(x_tex_u, y_tex_u)] = 0;
    //    const int neigbor_count = 6;
    //    const int3 neigbour_dirs[neigbor_count] = { int3(-1, 0, 0), int3(0, -1, 0), int3(0, 0, -1), int3(1, 0, 0), int3(0, 1, 0), int3(0, 0, 1) };
    //    for (i = 0; i < neigbor_count; i++)
    //    {
    //        int3 neighbour_coord = int3(x, y, z) + neigbour_dirs[i];
    //        if (neighbour_coord.x == -1 || neighbour_coord.y == -1 || neighbour_coord.z == -1 ||
    //            neighbour_coord.x == Nx || neighbour_coord.y == Ny || neighbour_coord.z == Nz)
    //        {
    //            PorousTarget[int2(x_tex_u, y_tex_u)] = 1;
    //            i = neigbor_count; // end for loop.
    //        }
    //        else if (!isBoundary(neighbour_coord.x, neighbour_coord.y, neighbour_coord.z))
    //        {
    //            PorousTarget[int2(x_tex_u, y_tex_u)] = 1;
    //            i = neigbor_count; // end for loop.
    //        }

    //    }

    //}
    
    
    // VORTICITY:
    //Vorticity = 
    //vorticity = (np.roll(ux, -1, axis=0) - np.roll(ux, 1, axis=0)) - (np.roll(uy, -1, axis=1) - np.roll(uy, 1, axis=1))
}
