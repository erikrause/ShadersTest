#include "/Engine/Public/Platform.ush"
#include "D2Q9CS-constants.usf"

static float Tau = 1.6; // collision timescale

Texture2D<float> F_in; // F with current t
RWTexture2D<float> F_out; // t + 1
RWTexture2D<float2> U;
int Iteration;
int Nx;
int Ny;
StructuredBuffer<int> PorousData;

bool isBoundary(int x, int y)
{
    return PorousData[x + y * Nx] == 0;
    //return ((pow((x - Nx / 4), 2) + pow((y - Ny / 2), 2)) < pow((Ny / 4), 2));
}

float getLocalRho(float f[Q])
{
    float rho = 0;
    for (int i = 0; i < Q; i++)
    {
        rho += f[i];
    }
    
    return rho;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void Main(uint3 DTid : SV_DispatchThreadID)
{
    int i; // for iterator.
    // Координаты рассчетной сетки:
    const int x = DTid.x;
    const int y = DTid.y;
    
    // координаты для F_out:
    const int x_out = DTid.x;
    const int y_out = DTid.y * Q;
    
    float2 u = float2(0, 0);
    
    float f[Q];
    for (i = 0; i < Q; i++)
    {
        f[i] = F_in[float2(x_out, y_out + i)];
    }

    if (!isBoundary(x, y))
    {
        float rho = getLocalRho(f);

        for (i = 0; i < Q; i++)
        {          
            float2 e = float2(cxs[i], cys[i]);
            u += f[i] * e;
        }
        u /= rho;
            
        float f_eq[Q];
        float2 unit = float2(1, 1); // единичный вектор.
        for (i = 0; i < Q; i++)
        {
            float2 e = float2(cxs[i], cys[i]); // lattice direction.
            
            f_eq[i] = rho * weights[i] * (1 + 3 * dot(e * u, unit) + //(cxs[i] * u.x + cys[i] * u.y) +
                                   9 * pow(dot(e * u, unit), 2) / 2 -
                                   3 * dot(pow(u, 2), unit) / 2);
            f[i] += -(1.0 / Tau) * (f[i] - f_eq[i]);
        }
    }
    
    // F OUTPUT:
    for (i = 0; i < Q; i++)
    {
        if (Iteration > 0)
        {
            F_out[float2(x_out, y_out + i)] = f[i];
        }
    }
    
    // U OUTPUT:
    U[float2(x, y)] = u;
    
    
    ////TEST POROUS OUTPUT:
    //int value = PorousData[x + y * Nx];
    //U[float2(x, y)] = float2(value, 0); // test porous data out.

}
    

