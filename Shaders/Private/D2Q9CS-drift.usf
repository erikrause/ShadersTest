//// MyTest.usf
 
//// Simple pass-through vertex shader
//void MainVS(
// in float4 InPosition : ATTRIBUTE0,
// out float4 Output : SV_POSITION
//)
//{
//    Output = InPosition;
//}
 
//// Simple solid color pixel shader
//float4 MyColor;
//float4 MainPS() : SV_Target0
//{
//    return MyColor;
//}

#include "/Engine/Public/Platform.ush"

//Nx = 400    // resolution x-dir
//Ny = 100    // resolution y-dir
float Rho0; // = 100; // average density
static float Tau = 1.6; // collision timescale

StructuredBuffer<int> PorousData;

int Iteration;
int Nx;
int Ny;

Texture2D<float> F_in;     // F with current t
RWTexture2D<float> F_out;  // t + 1

static const int Q = 9;   // number of directions.
//static int idxs[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8 };
static int cxs[] = { 0, 0, 1, 1, 1, 0, -1, -1, -1 };
static int cys[] = { 0, 1, 1, 0, -1, -1, -1, 0, 1 };

static int inverse_indexes[] = { 0, 5, 6, 7, 8, 1, 2, 3, 4 };

static const float PI = 3.14159265f;

SamplerState F_SamplerState;

bool isBoundary(int x, int y)
{
    //return PorousData[x + y * Nx] == 0;
    return ((pow((x - Nx / 4), 2) + pow((y - Ny / 2), 2)) < pow((Ny / 4), 2));
}

void initArray(int x, int y, int x_tex, int y_tex)
{
    //Fill init velocities:
    for (int i = 0; i < Q; i++)
    {
        F_out[float2(x_tex, y_tex + i)] = 1;
    }
        // TODO: F_out[x][y] += rand;   - (добавить флуктуации)
        
        
        // «адаем направление потока вправо:
    F_out[float2(x_tex, y_tex + 3)] += 2 * (1 + 0.2 * cos(2 * PI * x / Nx * 4));
        
    
    
    // Ќормализуем распределение направлений частиц по глобальной плотности:
    float rho = 0; // текуща€ локальна€ плотность.
    for (i = 0; i < Q; i++)
    {
        rho += F_out[float2(x_tex, y_tex + i)];
    }
    for (i = 0; i < Q; i++)
    {
        F_out[float2(x_tex, y_tex + i)] *= Rho0 / rho;
    }
        
        
    // √раничное условие:
    if (isBoundary(x, y)) //((pow((x - Nx / 4), 2) + pow((y - Ny / 2), 2)) < pow((Ny / 4), 2))   //  (x > 0 && x < 3 && y > -1 && y < 2)
    {
        for (int i = 0; i < Q; i++)
        {
            F_out[float2(x_tex, y_tex + i)] = 0;
        }
    }
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void Main(uint3 DTid : SV_DispatchThreadID)
{
    //  оординаты рассчетной сетки:
    int x = DTid.x;
    int y = DTid.y;
    
    // координаты дл€ F_out:
    int x_out = DTid.x;
    int y_out = DTid.y * 9;    // масштабируем Y {0..100} -> Y {0..900}, т.к. в одном узле сетки надо хранить 9 значений скорости (дл€ каждого нарпавлени€).
    //uint v_id = DTid.y % 9; // остаток от делени€?
    
    if (Iteration == 0)
    {
        initArray(x, y, x_out, y_out);
    }
    
    // DRIFT:
    //// Drift particles (with sampling): - TODO: test sampling vs indexing vs lerp perfomance.
    //float2 uv;
    //uv.x = (x_out - 0.5) / Nx;
    //uv.y = (y_out + 3 + 0.5) / (Ny * 9);
    ////float prob = F_in.Sample(samplerState, uv);
    //F_out[float2(x_out, y_out + 3)] = F_in.SampleLevel(F_SamplerState, uv, 0);
    
    
    float F[Q];
    for (int i = 0; i < Q; i++)
    {
        F[i] = F_in[float2(x_out, y_out + i)];
    }
    //F[0] = F_in[float2(x_out, y_out)];
    
    // Drift particles to neighbours (with indexing):
    for (int neighbour_id = 0; neighbour_id < Q; neighbour_id++)
    {
        int neighbour_x = x - cxs[neighbour_id];
        int neighbour_y = y - cys[neighbour_id];

        // замыкаем границы (аналог np.roll):
        if ((neighbour_x == -1) || (neighbour_x == Nx))
        {
            neighbour_x = abs(abs(neighbour_x) - Nx);
        }
        if ((neighbour_y == -1) || (neighbour_y == Ny))
        {
            neighbour_y = abs(abs(neighbour_y) - Ny);
        }

        int neighbour_y_out = neighbour_y * 9;
        
        //F_out[float2(x_out, y_out + neighbour_id)] = F_in[float2(neighbour_x, neighbour_y_out + neighbour_id)];
        F[neighbour_id] = F_in[float2(neighbour_x, neighbour_y_out + neighbour_id)];
    }
    
    float F_bound_temp[Q];
    // Check is cylinder and reflect: TODO: set boundaries outside.
    if (isBoundary(x, y)) //((pow((x - Nx / 4), 2) + pow((y - Ny / 2), 2)) < pow((Ny / 4), 2))
    {
        for (int i = 0; i < Q; i ++)
        {
            F_bound_temp[i] = F[inverse_indexes[i]];
        }
        F = F_bound_temp;
    }
    //else // if it isn't boundary.
    //{

    //}
        
    
    // F OUTPUT:
    for (int i = 0; i < Q; i++)
    {
        if (Iteration > 0)
        {
            F_out[float2(x_out, y_out + i)] = F[i];
        }
    }
    
    
    // TEST POROUS OUTPUT:
    //int value = PorousData[x + y * Nx];
    //U[float2(x, y)] = float2(value, 0);  // test porous data out.
    
    
    // VORTICITY:
    //Vorticity = 
    //vorticity = (np.roll(ux, -1, axis=0) - np.roll(ux, 1, axis=0)) - (np.roll(uy, -1, axis=1) - np.roll(uy, 1, axis=1))
    
}
