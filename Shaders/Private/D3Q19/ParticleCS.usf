#include "/Engine/Public/Platform.ush"
#include "D3Q19CS-constants.usf"
//SamplerState F_SamplerState;
Texture2D<float3> U;
Texture2D<float3> Pos_in;
RWTexture2D<float3> Pos_out;


//static const int q27cxs[27] = { -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1 };
//static const int q27cys[27] = { -1, -1 - 1,  0,  0,  0,  1,  1,  1, -1, -1 - 1,  0,  0,  0,  1,  1,  1, -1, -1 - 1,  0,  0,  0,  1,  1,  1 };
//static const int q27czs[27] = { -1,  0,  1, -1,  0,  1, -1,  0,  1, -1,  0,  1, -1,  0,  1, -1,  0,  1, -1,  0,  1, -1,  0,  1, -1,  0,  1 };

static const float timeScale = 1;
int Iteration;


// Замкнуть пространство на противоположные грани.
float3 closeField(float3 particle)
{
    float3 newParticle = float3(particle);
    
    if ((particle.x < 0) || (particle.x >= Nx))
    {
        newParticle.x = abs(abs(newParticle.x) - Nx);
    }
    if ((particle.y < 0) || (particle.y >= Ny))
    {
        newParticle.y = abs(abs(newParticle.y) - Ny);
    }
    if ((particle.z < 0) || (particle.z >= Nz))
    {
        newParticle.z = abs(abs(newParticle.z) - Nz);
    }
    
    return newParticle;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void Main(uint3 DTid : SV_DispatchThreadID)
{  
    // Init local variables:
    uint i, j, k = 0; // just iterator;
    
    float3 pos = Pos_in[DTid.xy];
    // Определяем нижнюю и верхнюю границу:
    int3 lower_lattice_neighbour = floor(pos);
    int3 upper_lattice_neighbour = ceil(pos);
    // Замыкаем пространство:
    int3 closed_lower_lattice_neigbour = closeField(lower_lattice_neighbour);
    int3 closed_upper_lattice_neigbour = closeField(upper_lattice_neighbour);
    
    // Linear interpolation:
    //// Соседи итерируются в цикле:
    //int3 current_lattice_neighbour;
    //int3 current_closed_lattice_neighbour;
    
    //#define lower lower_lattice_neighbour
    //#define upper upper_lattice_neighbour
    //#define closed_lower closed_lower_lattice_neigbour
    //#define closed_upper closed_upper_lattice_neigbour
    //#define current current_lattice_neighbour
    //#define current_closed current_closed_lattice_neighbour
    
    ///// TRILINEAR INTERPOLATION:
    //float s; // for lerp.
    //float2x3 u_x;
    //float2 xs;
    
    ////for (current.x; current.x <= upper.x; current.x++)
    //for (i = 0; i < 2; i++)
    //{
    //    float2x3 u_y;
    //    float2 ys;
        
    //    //for (current.y; current.y <= upper.y; current.y++)
    //    for (j = 0; j < 2; j++)
    //    {
    //        float2x3 u_z;
    //        float2 zs;
            
    //        //for (current.z; current.z <= upper.z; current.z++)
    //        for (k = 0; k < 2; k++)
    //        {
    //            current = lower + (upper - lower) * int3(i, j, k);
    //            current_closed = closed_lower + (closed_upper - closed_lower) * int3(i, j, k);
    //            // Координаты 3D данных, хранящиеся в 2D текстуре U.
    //            uint x_tex = current_closed.x + current_closed.z * Nx;
    //            uint y_tex = current_closed.y;
                
    //            float3 u = U[uint2(x_tex, y_tex)];
    //            u_z[k] = u;
    //            zs[k] = current.z;
    //        }
            
    //        s = (zs[1] - pos.z) / (zs[1] - zs[0]);
    //        u_y[j] = lerp(u_z[0], u_z[1], s); //(z2 - pos.z) / (z2 - z1));
    //        ys[j] = current.y;
    //    }
        
    //    s = (ys[1] - pos.y) / (ys[1] - ys[0]);
    //    u_x[i] = lerp(u_y[0], u_y[1], s);
    //    xs[i] = current.x;

    //    //int3 e = int3(cxs[i], cys[i], czs[i]);  // смещение к соседу.
    //    //int3 neigbour = 0;
    //}
    
    //s = (xs[1] - pos.x) / (xs[1] - xs[0]);
    //float3 interpolated_u = lerp(u_x[0], u_x[1], s);
    
    // Координаты 3D данных, хранящиеся в 2D текстуре U.
    uint x_tex = closed_upper_lattice_neigbour.x + closed_upper_lattice_neigbour.z * Nx;
    uint y_tex = closed_upper_lattice_neigbour.y;
    float3 u = U[uint2(x_tex, y_tex)];
    float3 newPos = closeField(pos + u);
    
    Pos_out[DTid.xy] = newPos;
    
    if (Iteration == 0)
    {
        pos.z = DTid.x / (Nx * Ny);
        uint tempX = DTid.x - (pos.z * Nx * Ny);
        pos.y = tempX / Nx;
        pos.x = tempX % Nx;
        Pos_out[DTid.xy] = pos;
    }
    
    //TODO: make closed position.
    
    
        //float3 u = ;
    
    //normalize(u);   // TEST! TODO: check time step.
    
    //Pos_out[DTid.xy] = pos + u;
}